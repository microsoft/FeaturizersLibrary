(Description string min_length=0 default="" ?)

(Param):
    [type string]
    [name string]
    [description Description]
    [is_optional bool default="false" ?]

<custom_structs *>:
    [name string]
    [description Description]

    <members Param +>

<custom_enums *>:
    [name string]
    [description Description]
    [starting_index int min=0 default="1" ?]
    [underlying_type string default="uint32" ?]

    <values string +>
    <integer_values int *>

<featurizers +>:
    [name string]
    [estimator_name string]

    [release_version string]
    [updated_version string ?]
    [deprecated_version string ?]

    [num_output_columns int min=1]
    [description Description]
    [status enum values=["Pending", "External", "Available"] default="Available" ?]

    # Most Transformers output 1 item for each input (there is a 1:1 relationship between
    # input and output). More exotic transformers will output 0-N items for each input, and
    # need to be explicitly flushed when all input is complete. Set this value to true for
    # those featurizers that support dynamic output.
    #
    # Note that dynamic output generally implies that state is required by the transformer
    # between calls to the Transformer's execute method. The framework must take care to
    # ensure this state is maintained by batching, extracting state info between invocations,
    # or some other method.
    [has_dynamic_output bool default=false ?]

    # True if the transformer maintains state between 'execute' invocations.
    [transformer_maintains_state bool default=false ?]

    # TODO: I hope that we don't need this value once we get rid of column-based
    #       annotations in favor of "ModelContexts".
    [creates_annotations bool default=true ?]

    <custom_structs custom_structs>
    <custom_enums custom_enums>

    <configuration_params Param *>

    <templates *>:
        [name string]
        [description Description]
        <types string +>

    # Set this value to true when the featurizer is a template but can be invoked
    # without any template args.
    #
    # TODO: This is a hack that should go away once MaxNumTrainingItemsV is no longer
    #       a template on trainable featurizers.
    <featurizer_is_a_template bool default=false ?>

    [input_description Description]
    [output_description Description]

    [is_input_a_template bool default=true ?]
    [is_output_a_template bool default=false ?]

    <type_mappings *>:
        [description Description]

        [input_type string]
        [is_input_optional bool default=false ?]

        [output_type string]
        [is_output_optional bool default=false ?]
