# ----------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License
parameters:
  configuration: ""
  esrp_connected_service_name: ""
  operating_system: "" # Windows|Linux|MacOS

  # These are parameters not because they will be configued by the caller, but rather because arrays can be
  # defined here and not in variables.
  build_configurations:
    - Debug
    - Release

  artifact_configurations:
    - "Windows-x64-Clang 8"
    - "Windows-x86-Clang 8"
    # - 'Linux-Holy Build Box-GCC'
    - "Ubuntu 16.04-x64-GCC"
    - "MacOS 10.14-x64-Clang"

steps:
  - task: PythonScript@0
    displayName: "[DEBUG] Display Variables"

    timeoutInMinutes: 180

    inputs:
      scriptSource: inline
      script: |-
        import textwrap

        print(
            textwrap.dedent(
                """\
                configuration:                ${{ parameters.configuration }}
                esrp_connected_service_name:  ${{ parameters.esrp_connected_service_name }}
                operating_system:             ${{ parameters.operating_system }}
                """,
            ),
        )

  - template: BuildAndTest.initialize_steps_template.yaml
    parameters:
      operating_system: ${{ parameters.operating_system }}

  - script: |-
      $(pipeline_display_all_environment_vars)
    displayName: "[DEBUG] Environment Variables (Before Activation)"
    timeoutInMinutes: 180

  - script: |-
      $(pipeline_bootstrap_command) "$(pipeline_bootstrap_directory)" "/configuration=${{ parameters.configuration }}" /use_ascii /verbose
    displayName: "<Bootstrap>"
    timeoutInMinutes: 180

  - script: |-
      $(pipeline_activate_script) "${{ parameters.configuration }}" && $(pipeline_display_all_environment_vars)
    displayName: "[DEBUG] Environment Variables (After Activation)"
    timeoutInMinutes: 180

  - ${{ each artifact in parameters.artifact_configurations }}:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download "${{ artifact }}" Artifacts'

        timeoutInMinutes: 180

        inputs:
          buildType: current
          artifactName: ${{ artifact }}
          targetPath: "$(Build.StagingDirectory)/${{ artifact }}"

  - ${{ each build_configuration in parameters.build_configurations }}:
      # This task is a python script rather than a standard script as a hack to take advantage of list comprehensions. Change this to a standard
      # script if there is a way to do that.
      - task: PythonScript@0
        displayName: "<Build.py Package - ${{ build_configuration }}>"

        timeoutInMinutes: 180
        condition: succeededOrFailed()

        inputs:
          scriptSource: inline
          script: |-
            import os

            artifacts = "${{ join(',', parameters.artifact_configurations) }}".split(',')

            # Not using format to remain compatible with python2
            command_line = '$(pipeline_activate_script) "${{ parameters.configuration }}" && python %s Package "%s" /verbose %s' % (
                os.path.join("src", "SharedLibrary", "Build.py"),
                os.path.join(r"$(pipeline_artifacts_directory)", "Artifacts", "Packages", "${{ build_configuration }}"),
                " ".join(['"/build_dir=%s"' % os.path.join(r"$(Build.StagingDirectory)", artifact, "Builder", "${{ build_configuration }}") for artifact in artifacts]),
            )

            print(command_line)
            os.system(command_line)

  # Sign the packages
  - ${{ if not(eq(parameters.esrp_connected_service_name, '')) }}:
      - task: CopyFiles@2
        displayName: "Copy Files to Sign"
        inputs:
          SourceFolder: "$(pipeline_artifacts_directory)/Artifacts/Packages"
          TargetFolder: "$(pipeline_artifacts_directory)/Artifacts/Packages.original"
          CleanTargetFolder: true
        timeoutInMinutes: 180

      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
        displayName: "ESRP CodeSign"
        inputs:
          ConnectedServiceName: ${{ parameters.esrp_connected_service_name }}
          FolderPath: "$(pipeline_artifacts_directory)/Artifacts/Packages"
          Pattern: "*.nupkg"
          signConfigType: inlineSignParams
          inlineOperation: |-
            [
                {
                    "KeyCode" : "CP-401405",
                    "OperationCode" : "NuGetSign",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-401405",
                    "OperationCode" : "NuGetVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
        timeoutInMinutes: 180

  - task: PublishPipelineArtifact@0
    displayName: "Publish Artifacts"

    timeoutInMinutes: 180

    inputs:
      targetPath: "$(pipeline_artifacts_directory)/Artifacts"
      artifactName: "Packages"
