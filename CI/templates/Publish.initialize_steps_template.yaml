# ----------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License
parameters:
  azure_dev_ops_build_definition_id: "" # 717 (The definition ID of the build pipeline)
  azure_dev_ops_project_id: "" # 7b4fddf7-fb53-4b12-bfcb-f87ad3774a32 (The project GUID from which to download the pipeline artifacts)
  minimal_download: false

  # These are parameters not because they will be configued by the caller, but rather because arrays can be
  # defined here and not in variables.
  artifacts:
    - Globals
    - "Windows-x64-Clang 8.0.0"
    - Packages
    - Documentation

steps:
  # This build task will attempt to download artifacts from the triggered build or
  # a build specified by the user when queueing the build definition.
  - task: PythonScript@0
    displayName: "[IMPL] Validate Variables"

    timeoutInMinutes: 180

    inputs:
      scriptSource: inline
      script: |-
        triggered_build_id = "$(Build.TriggeredBy.BuildNumber)"
        build_id = "$(build_id)"

        # the intention here is to compare if var == '$(var)', but as the right side of == will be a string of
        # "$(var)" if var is empty, or the exact value which is equal to var if var is assigned the value.
        # Therefore, a non-standard comparison is necessary in this case
        if triggered_build_id == ("%s(Build.TriggeredBy.BuildNumber)" % "$") and build_id == ("%s(build_id)" % "$"):
            raise Exception("Please specify a value for the variable 'build_id' when triggering this build manually")

  # Download from a specific id
  - ${{ each artifact in parameters.artifacts }}:
      - ? ${{ if or(not(eq(parameters.minimal_download, 'true')), eq(artifact, 'Globals'), eq(artifact, 'Windows-x64-Clang 8.0.0')) }}
        : - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifacts (Manually Triggered Build [${{ artifact }}])"

            timeoutInMinutes: 180
            condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))

            inputs:
              buildType: specific
              project: "${{ parameters.azure_dev_ops_project_id }}"
              definition: "${{ parameters.azure_dev_ops_build_definition_id }}"
              specificBuildWithTriggering: false
              buildVersionToDownload: specific
              pipelineId: "$(build_id)"
              artifactName: "${{ artifact }}"
              targetPath: "$(Pipeline.Workspace)/${{ artifact }}"

  # Download from a triggered build
  - ${{ each artifact in parameters.artifacts }}:
      - ? ${{ if or(not(eq(parameters.minimal_download, 'true')), eq(artifact, 'Globals'), eq(artifact, 'Windows-x64-Clang 8.0.0')) }}
        : - task: DownloadPipelineArtifact@2
            displayName: "Download Pipeline Artifacts (Pipeline Build [${{ artifact }}])"

            timeoutInMinutes: 180
            condition: and(succeeded(), eq(variables['Build.Reason'], 'BuildCompletion'))

            inputs:
              buildType: specific
              project: "${{ parameters.azure_dev_ops_project_id }}"
              definition: "${{ parameters.azure_dev_ops_build_definition_id }}"
              specificBuildWithTriggering: true
              buildVersionToDownload: latestFromBranch
              artifactName: "${{ artifact }}"
              targetPath: "$(Pipeline.Workspace)/${{ artifact }}"

  - task: PythonScript@0
    displayName: "[IMPL] Populate Stage Variables"

    timeoutInMinutes: 180

    inputs:
      scriptSource: inline
      script: |-
        import json
        import os

        from collections import OrderedDict

        values = OrderedDict()

        for info_filename in [
            os.path.join(r"$(Pipeline.Workspace)", "Globals", "globals.json"),
            os.path.join(r"$(Pipeline.Workspace)", "Windows-x64-Clang 8.0.0", "Builder", "product_version_info.json"),
        ]:
            assert os.path.isdir(os.path.dirname(info_filename)), info_filename
            assert os.path.isfile(info_filename), info_filename

            with open(info_filename) as f:
                content = json.load(f)

            for k, v in content.items():
                k = "pipeline_%s" % k
                assert k not in values, (k, info_filename, values[k])

                if isinstance(v, bool):
                    v = 1 if v else 0
                elif v is None:
                    v = ""

                values[k] = v

        for k, v in values.items():
            print("%s = %s" % (k, v))
            print("##vso[task.setvariable variable=%s]%s" % (k, v))
