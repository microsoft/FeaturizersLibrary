# ----------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License
parameters:
  configuration: "" # Environment Activation Configuration
  esrp_connected_service_name: "" # Name of service connection to use for code signing (or empty string if code signing is not required)
  operating_system: "" # Windows|Linux|MacOS
  test_only: False # Set to true to only run tests (no build)
  build_only: False # Set to true to only build (no test execution)
  artifact_name: ""
  tester_code_coverage: False # Enable code coverage for tests
  tester_release_only: False # Only run release tests
  tester_build_only: False # Set to true to only build tests (no test execution)

  # These are parameters not because they will be configued by the caller, but rather because arrays can be
  # defined here and not in variables.
  test_types:
    "UnitTests": " $(pipeline_tester_code_coverage_arg) $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)"
    "FunctionalTests": " $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)"
    "IntegrationTests": " $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)"
    "SystemTests": " $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)"
    "LocalEndToEndTests": " $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)"
    # 'EndToEndTests': ' $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)'
    # 'BuildVerificationTests': ' $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)'
    # 'PerformanceTests: ' $(pipeline_tester_release_only_arg) $(pipeline_tester_build_only_arg)'

steps:
  - task: PythonScript@0
    displayName: "[DEBUG] Display Variables"

    timeoutInMinutes: 180

    inputs:
      scriptSource: inline
      script: |-
        import textwrap

        print(
            textwrap.dedent(
                """\
                configuration:                ${{ parameters.configuration }}
                esrp_connected_service_name:  ${{ parameters.esrp_connected_service_name }}
                operating_system:             ${{ parameters.operating_system }}
                test_only:                    ${{ parameters.test_only }}
                build_only:                   ${{ parameters.build_only }}
                artifact_name:                ${{ parameters.artifact_name }}
                tester_code_coverage:         ${{ parameters.tester_code_coverage }}
                tester_release_only:          ${{ parameters.tester_release_only }}
                tester_build_only:            ${{ parameters.tester_build_only }}
                """,
            ),
        )

  - template: BuildAndTest.initialize_steps_template.yaml
    parameters:
      operating_system: ${{ parameters.operating_system }}

  - task: PythonScript@0
    displayName: "[IMPL] Populate Builder and Tester Variables"

    timeoutInMinutes: 180

    inputs:
      scriptSource: inline
      script: |-
        import json
        import os

        from collections import OrderedDict

        values = OrderedDict()

        # Builder
        if "$(pipeline_is_release_build)" == "1":
            args = "/release_build"
        else:
            args = '"/prerelease_build_name=$(pipeline_build_name)"'

        # Not using format to remain compatible with python2
        values["pipeline_builder_args"] = '"/custom_build_args=src/SharedLibrary:%s /no_build_info"' % args

        # Tester
        tester_code_coverage = "${{ parameters.tester_code_coverage }}".lower() in ["true", "yes"]
        tester_release_only = "${{ parameters.tester_release_only }}".lower() in ["true", "yes"]
        tester_build_only = "${{ parameters.tester_build_only }}".lower() in ["true", "yes"]

        if tester_code_coverage and (tester_release_only or tester_build_only):
            raise Exception("'tester_code_coverage' and 'tester_release_only'/'tester_build_only' are mutually exclusive variables and cannot both be set")

        values["pipeline_tester_code_coverage_arg"] = "/code_coverage /code_coverage_validator_flag=min_code_coverage_percentage:75.0" if tester_code_coverage else ""
        values["pipeline_tester_release_only_arg"] = "/release_only" if tester_release_only else ""
        values["pipeline_tester_build_only_arg"] = "/build_only" if tester_build_only else ""

        for k, v in values.items():
            # Not using format to remain compatible with python2
            print("%s = %s" % (k, v))
            print("##vso[task.setvariable variable=%s]%s" % (k, v))

  - script: |-
      $(pipeline_display_all_environment_vars)
    displayName: "[DEBUG] Environment Variables (Before Activation)"
    timeoutInMinutes: 180

  - script: |-
      $(pipeline_bootstrap_command) "$(pipeline_bootstrap_directory)" "/configuration=${{ parameters.configuration }}" /use_ascii /verbose
    displayName: "<Bootstrap>"
    timeoutInMinutes: 180

  - script: |-
      $(pipeline_activate_script) "${{ parameters.configuration }}" && $(pipeline_display_all_environment_vars)
    displayName: "[DEBUG] Environment Variables (After Activation)"
    timeoutInMinutes: 180

  # TODO: Code Formatting

  - script: |-
      $(pipeline_activate_script) "${{ parameters.configuration }}" && Tester$(pipeline_script_extension) MatchAllTests . UnitTests /verbose
    displayName: "<Tester (MatchAllTests) - UnitTests>"
    timeoutInMinutes: 180

  - ${{ each test_type in parameters.test_types }}:
      - script: |-
          $(pipeline_activate_script) "${{ parameters.configuration }}" && Tester$(pipeline_script_extension) TestAll . "$(pipeline_artifacts_directory)/Tester/${{ test_type.key }}" ${{ test_type.key }} ${{ test_type.value }} /verbose $(pipeline_single_threaded_arg)
        displayName: "<Tester - ${{ test_type.key }}>"
        condition: succeededOrFailed()
        timeoutInMinutes: 180

  - ${{ if not(eq(parameters.test_only, 'true')) }}:
      - script: |-
          $(pipeline_activate_script) "${{ parameters.configuration }}" && Builder$(pipeline_script_extension) Execute . "$(pipeline_artifacts_directory)/Builder" /verbose $(pipeline_builder_args)
        displayName: <Builder>
        timeoutInMinutes: 180

      # Sign the content
      - ${{ if not(eq(parameters.esrp_connected_service_name, '')) }}:
          - task: CopyFiles@2
            displayName: "Copy Files to Sign"
            inputs:
              SourceFolder: "$(pipeline_artifacts_directory)/Builder"
              TargetFolder: "$(pipeline_artifacts_directory)/Builder.original"
              CleanTargetFolder: true

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: "ESRP CodeSign"
            inputs:
              ConnectedServiceName: ${{ parameters.esrp_connected_service_name }}
              FolderPath: "$(pipeline_artifacts_directory)/Builder"
              signConfigType: inlineSignParams
              inlineOperation: |-
                [
                    {
                        "KeyCode" : "CP-230012",
                        "OperationCode" : "SigntoolSign",
                        "Parameters" : {
                            "OpusName" : "Microsoft",
                            "OpusInfo" : "http://www.microsoft.com",
                            "FileDigest" : "/fd \"SHA256\"",
                            "PageHash" : "/NPH",
                            "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                        },
                        "ToolName" : "sign",
                        "ToolVersion" : "1.0"
                    },
                    {
                        "KeyCode" : "CP-230012",
                        "OperationCode" : "SigntoolVerify",
                        "Parameters" : {},
                        "ToolName" : "sign",
                        "ToolVersion" : "1.0"
                    }
                ]

      - task: PythonScript@0
        displayName: "[IMPL] Persist Product Version Information"

        timeoutInMinutes: 180

        inputs:
          scriptSource: inline
          script: |-
            import json
            import os

            from collections import OrderedDict

            values = OrderedDict()

            builder_dir = os.path.join(r"$(pipeline_artifacts_directory)", "Builder")
            assert os.path.isdir(builder_dir), builder_dir

            # Get the release directory
            for potential_dirname in os.listdir(builder_dir):
                potential_fullpath = os.path.join(builder_dir, potential_dirname)
                if not os.path.isdir(potential_fullpath):
                    continue

                file_attributes_filename = os.path.join(potential_fullpath, "Microsoft MLFeaturizers.FileAttributes.json")
                assert os.path.isfile(file_attributes_filename), file_attributes_filename

                with open(file_attributes_filename) as f:
                  file_attributes_data = json.load(f)

                assert "product_version_full" in file_attributes_data, file_attributes_data
                values["product_version"] = file_attributes_data["product_version_full"]

                break

            for k, v in values.items():
                # Not using format to remain compatible with python2
                print("%s = %s" % (k, v))

            with open(os.path.join(builder_dir, "product_version_info.json"), "w") as f:
                json.dump(values, f)

  - task: PublishPipelineArtifact@0
    displayName: "Publish Artifacts"

    condition: succeededOrFailed()
    timeoutInMinutes: 180

    inputs:
      targetPath: $(pipeline_artifacts_directory)
      artifactName: "${{ parameters.artifact_name }}"
